@startuml DX Engine
title Engine Class Diagram

<style>
classDiagram {
  BackgroundColor Snow
  FontColor DarkMagenta
  LineColor DarkViolet
  FontName arial
  FontSize 20
  
  'class {'
  '  BackgroundColor LightCyan'
  '}'
}
</style>
skinparam class {
    BackgroundColor LightCyan
}
skinparam roundCorner 15
skinparam Shadowing false
skinparam ClassBorderThickness 1
skinparam CircledCharacterFontColor DarkViolet
skinparam CircledCharacterFontStyle bold
'skinparam CircledCharacterFontSize 15'
'skinparam CircledCharacterRadius 10'

skinparam ClassStereotypeFontColor DarkMagenta
skinparam ClassStereotypeFontSize 15

'note right of Engine
note as A

  하얀 다이아 연결 : Aggregation, 객체와 별개

  까만 다이아 연결 : Composition, 같이 없어짐

  구조가 단순한 클래스, 구조체는 생략 또는 따로 떼어놓음
end note


package Manager <<Rectangle>> {
  class Engine <<(C, Aqua) Singleton>>
  class Device <<(C, Aqua) Singleton>>
  class PathManager <<(C, Aqua) Singleton>>
  class Input <<(C, Aqua) Singleton>>
  class CollisionManager <<(C, Aqua) Singleton>>
  class ResourceManager <<(C, Aqua) Singleton>>
  class RenderManager <<(C, Aqua) Singleton>>
  class SceneManager <<(C, Aqua) Singleton>>
  class EditorManager <<(C, Aqua) Singleton>>
}

package Resources <<Rectangle>> {
  class hidden
  class ShaderManager <<(C, Aqua)>>
  class TextureManager <<(C, Aqua)>>
  class MaterialManager <<(C, Aqua)>>
  class MeshManager <<(C, Aqua)>>
  class AnimationManager <<(C, Aqua)>>

  abstract class Shader <<abstract>>
  class ConstantBuffer <<(C, Aqua)>>
  abstract class ConstantBufferData <<abstract>>

  class Texture <<(C, Aqua)>>
  class Sampler <<(C, Aqua)>>

  class Material <<(C, Aqua)>>

  abstract class Mesh <<abstract>>
  struct MeshContainer <<(S, DeepSkyBlue)>>
  struct MeshSlot <<(S, DeepSkyBlue)>>

  class Animation <<(C, Aqua)>>
  class AnimationData <<(C, Aqua)>>
  class AnimationSequence <<(C, Aqua)>>
  'class SoundManager <<(C, Aqua)>>
  'class Sound <<(C, Aqua)>>

  'class FontManager <<(C, Aqua)>>
  'class Font <<(C, Aqua)>>
}

package Render <<Rectangle>> {
  class RenderLayer <<(S, DeepSkyBlue)>>
  abstract class RenderState <<abstract>>
}

package Scene <<Rectangle>> {
  class Scene <<(C, Aqua)>>
  class SceneInfo <<(C, Aqua)>>
  class SceneResource <<(C, Aqua)>>
  class SceneCollision <<(C, Aqua)>>
  class CameraManager <<(C, Aqua)>>

  struct Section <<(S, DeepSkyBlue)>>
  class CollisionSection <<(C, Aqua)>>
  abstract class Collider <<abstract>>

  class GameObject <<(C, Aqua)>>
  abstract class Component <<abstract>>
  class SceneComponent <<(C, Aqua)>>
  class Transform <<(C, Aqua)>>
  class ObjectComponent <<(C, Aqua)>>
}


class CRef <<(C, Aqua)>>
class CShader <<(C, Aqua)>>
class CConstantBuffer <<(C, Aqua)>>
class CTexture <<(C, Aqua)>>
class CMaterial <<(C, Aqua)>>
class CMesh <<(C, Aqua)>>
class CRenderState <<(C, Aqua)>>
class CAniamtion <<(C, Aqua)>>
class CAniamtionSequence <<(C, Aqua)>>
class CComponent <<(C, Aqua)>>
class CGameObject <<(C, Aqua)>>




CRef <|-up-  CShader
CRef <|-up-  CConstantBuffer
CRef <|-up-  CTexture
CRef <|-up-  CMaterial
CRef <|-up-  CMesh
CRef <|--  CRenderState
CRef <|--  CAniamtion
CRef <|--  CAniamtionSequence
CRef <|--  CComponent
CRef <|--  CGameObject


'Engine -- Device
'Engine -- Input
'Engine -- PathManager
' Engine -- CollisionManager
' Engine -- ResourceManager
' Engine -- RenderManager
' Engine -- SceneManager
' Engine -- EditorManager

  ' ResourceManager *--> ShaderManager
  ' ResourceManager *--> TextureManager
  ' ResourceManager *--> MaterialManager
  ' ResourceManager *--> MeshManager
  ' ResourceManager *--> AnimationManager
  ResourceManager ----- hidden
  hidden -- ShaderManager
  hidden -- TextureManager
  hidden -- MaterialManager
  hidden -- MeshManager
  hidden -- AnimationManager
    ShaderManager *--> Shader : map >
    ShaderManager *-------> ConstantBuffer : map >
      ConstantBufferData o--> ConstantBuffer
    TextureManager *--> Texture : map >
    TextureManager *--> Sampler : map >
    MaterialManager *--> Material : map >
      Material o--> "1" Texture
      Material o--> "1" Shader
      Material o--> "3" RenderState : array >
      Material o--> "1" ConstantBufferData
    MeshManager *--> Mesh : map >
      Mesh *--> MeshContainer : vector >
      Mesh *--> MeshSlot : vector >
        MeshContainer o--> MeshSlot : vector >
        MeshSlot o--> "1" Material
    AnimationManager *------> AnimationSequence : map >
      Animation *--> AnimationData : map >
      AnimationData o--> AnimationSequence
      AnimationSequence o--> Texture
        Animation o--> "1" ConstantBufferData

  'RenderManager *--> RenderLayer : map >
    RenderLayer o--> "1" RenderState
    RenderLayer o-->  SceneComponent : vector >

  'SceneManager *--> " 1 " Scene
    Scene *--> " 1 " SceneInfo
    Scene *--> " 1 " CameraManager
      CameraManager o--> " 1 " SceneComponent
    Scene *---> " 1 " SceneResource
    Scene *---> " 1 " SceneCollision
    Scene *--->  GameObject : list >
      SceneResource o---> Shader : map >
      SceneResource o---> Texture : map >
      SceneResource o---> Material : map >
      SceneResource o---> Mesh : map >
      SceneResource o---> AnimationSequence : map >
'     SceneResource o---> Sound : map >
      SceneCollision *-->  " 1 " Section
      SceneCollision *-->  Collider : vector >
        Section *--> CollisionSection : vector >
          CollisionSection o--> Collider : vector(tmp) >

      Component <|--  Collider
        Collider o--> "1" ConstantBufferData
      Component <|--  SceneComponent
      Component <|--  ObjectComponent
      GameObject *-->  SceneComponent : list >
      GameObject *-->  ObjectComponent : vector >
        SceneComponent *--> " 1 " Transform
          Transform o--> "1" ConstantBufferData


hide hidden
hide hidden1

'stop'
@enduml