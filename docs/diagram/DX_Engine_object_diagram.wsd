@startuml DX Engine
title Engine Class Diagram

<style>
classDiagram {
  BackgroundColor Snow
  FontColor DarkMagenta
  LineColor DarkViolet
  FontName arial
  FontSize 20
  
  'class {'
  '  BackgroundColor LightCyan'
  '}'
}
</style>
skinparam class {
    BackgroundColor LightCyan
}
skinparam roundCorner 15
skinparam Shadowing false
skinparam ClassBorderThickness 1
skinparam CircledCharacterFontColor DarkViolet
skinparam CircledCharacterFontStyle bold
'skinparam CircledCharacterFontSize 15'
'skinparam CircledCharacterRadius 10'

skinparam ClassStereotypeFontColor DarkMagenta
skinparam ClassStereotypeFontSize 15

'note right of Engine
note as A

  하얀 다이아 연결 : Aggregation, 객체와 별개

  까만 다이아 연결 : Composition, 같이 없어짐

  구조가 단순한 클래스, 구조체는 생략 또는 따로 떼어놓음
end note

class Engine <<(C, Aqua) Singleton>>

package Manager <<Rectangle>> {
  class Device <<(C, Aqua) Singleton>>
  class PathManager <<(C, Aqua) Singleton>>
  class Input <<(C, Aqua) Singleton>>
  class CollisionManager <<(C, Aqua) Singleton>>
  class ResourceManager <<(C, Aqua) Singleton>>
  class RenderManager <<(C, Aqua) Singleton>>
  class SceneManager <<(C, Aqua) Singleton>>
  class EditorManager <<(C, Aqua) Singleton>>
}

class CollisionProfile <<(S, DeepSkyBlue)>>

package Resources <<Rectangle>> {
  class ShaderManager <<(C, Aqua)>>
  class TextureManager <<(C, Aqua)>>
  class MaterialManager <<(C, Aqua)>>
  class MeshManager <<(C, Aqua)>>
  class AnimationManager <<(C, Aqua)>>

  class Shader <<(C, Aqua)>>
  class ConstantBuffer <<(C, Aqua)>>

  class Texture <<(C, Aqua)>>
  class Sampler <<(C, Aqua)>>

  class Material <<(C, Aqua)>>
  class RenderState <<(C, Aqua)>>

  class Mesh <<(C, Aqua)>>
  class MeshContainer <<(S, DeepSkyBlue)>>
  class MeshSlot <<(S, DeepSkyBlue)>>

  class Animation <<(C, Aqua)>>
  class AnimationData <<(C, Aqua)>>
  class AnimationSequence <<(C, Aqua)>>
  'class SoundManager <<(C, Aqua)>>
  'class Sound <<(C, Aqua)>>

  'class FontManager <<(C, Aqua)>>
  'class Font <<(C, Aqua)>>
}

class Scene <<(C, Aqua)>>
class GameObject <<(C, Aqua)>>
class Camera <<(C, Aqua)>>
class SceneCollision <<(C, Aqua)>>
class SceneResource <<(C, Aqua)>>
class WidgetWindow <<(C, Aqua)>>
class Widget <<(C, Aqua)>>

abstract class Collider
class ColliderBox <<(C, Aqua)>>
class ColliderCircle <<(C, Aqua)>>
class ColliderLine <<(C, Aqua)>>


class CRef <<(C, Aqua)>>
class CGameObject <<(C, Aqua)>>
class CCollider <<(C, Aqua)>>
class CTexture <<(C, Aqua)>>
class CAniamtionSequence <<(C, Aqua)>>
class CSound <<(C, Aqua)>>
class CFont <<(C, Aqua)>>
class CWidget <<(C, Aqua)>>
class CWidgetWindow <<(C, Aqua)>>



Engine -left- hidden1
hidden1 -up- CRef
CRef <|-left-  CGameObject
CRef <|--  CCollider
CRef <|--  CTexture
CRef <|-right-  CAniamtionSequence
CRef <|--  CSound
CRef <|--  CFont
CRef <|-up-  CWidgetWindow
CRef <|-up-  CWidget


'Engine -- Device
'Engine -- Input
'Engine -- PathManager
Engine -- CollisionManager
CollisionManager *--> CollisionProfile : map >
Engine -- ResourceManager
Engine -- RenderManager
Engine -- SceneManager
Engine -- EditorManager


  ResourceManager *--> ShaderManager
  ResourceManager *--> TextureManager
  ResourceManager *--> MaterialManager
  ResourceManager *--> MeshManager
  ResourceManager *--> AnimationManager
  'ResourceManager *--> SoundManager
  'ResourceManager *--> FontManager
    ShaderManager *--> Shader : map >
    ShaderManager *--> ConstantBuffer : map >
    TextureManager *--> Texture : map >
    TextureManager *--> Sampler : map >
    MaterialManager *--> Material : map >
      Material o--> "1" Texture
      Material o--> "1" Shader
      Material o--> "3" RenderState : array >
    MeshManager *--> Mesh : map >
      Mesh *--> MeshContainer : vector >
      Mesh *--> MeshSlot : vector >
        MeshContainer o--> MeshSlot : vector >
        MeshSlot o--> "1" Material
    
    AnimationManager *--> AnimationSequence : map >
      Animation *--> AnimationData : map >
      AnimationInfo o--> AnimationSequence
      AnimationSequence o-> Texture
    'SoundManager *--> Sound : map >
    'FontManager *--> Font : map >

    TextureManager -- hidden
    AnimationManager -- hidden
    SoundManager -- hidden
    FontManager -- hidden
    hidden -- Scene










Engine -- SceneManager
SceneManager *----> " 1 " Scene
Scene *-left-> " 1 " Camera
Scene *---> " 1 " SceneResource
Scene *---> " 1 " SceneCollision
Scene *--->  GameObject : list >
Scene *--->  WidgetWindow : vector >
WidgetWindow *-->  Widget : vector >
SceneCollision o-->  Collider : vector >
SceneCollision o-->  WidgetWindow : vector >

SceneResource o---> Texture : map >
Texture *--> ImageInfo : vector >
SceneResource o---> AnimationSequence : map >
SceneResource o---> Sound : map >
SceneResource -up---> TextureManager : Find
SceneResource -up---> AnimationManager : Find
SceneResource -up---> SoundManager : Find
SceneResource -up---> FontManager : Find


GameObject *-->  Collider : list >
Collider <|..  ColliderBox
Collider <|..  ColliderCircle
Collider <|..  ColliderLine
SceneCollision -up-> CollisionManager : Check

GameObject o--> Texture
GameObject *--> Animation

hide hidden
hide hidden1

'stop'
@enduml