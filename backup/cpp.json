// path : %APPDATA%\Code\User\snippets\cpp.json
// 기본 설정: 사용자 코드 조각 구성 -> cpp.json
// 서버에서 제공하는 코드 조각을 사용하고 싶을 때 : 설정 -> snippet 검색 C_Cpp: Suggest Snippets 체크
{
	"operator": {
		"prefix": "operator",
		"body": [
			"${3:bool} operator ${1} (${2:const type& value}) const {",
			"\t$0",
			"}"
		],
		"description": "Code snippet for operators "
	},
	// 참고 : https://jaimemin.tistory.com/1521
	"algorithm main": {
		"prefix": "algorithmmain",
		"body": [
			"#include <iostream>\n",
			"int main() {",
			"\tstd::ios_base::sync_with_stdio(false);",
			"\tstd::cin.tie(nullptr);",
			"\tstd::cout.tie(nullptr);\n",
			"\t$0\n",
			"\tsystem(\"pause\");",
			"\treturn 0;",
			"}\n"
		],
		"description": "Code snippet for main of Problem Solving "
	},
	"cout": {
		"prefix": "cout",
		"body": [
			"std::cout << $0 << std::endl;"
		],
		"description": "Code snippet for std::cout "
	},
	"template": {
		"prefix": "template",
		"body": [
			"template <typename ${0:T}>"
		],
		"description": "Code snippet for template "
	},
	"namespace": {
		"prefix": "namespace",
		"body": [
			"namespace $1 {",
			"\t$0",
			"}\t// namespace $1\n"
		],
		"description": "Code snippet for namespace "
	},
	"for": {
		"prefix": "for",
		"body": [
			"for (${1:size_t} ${2:i} = 0; ${2:i} < ${3:count}; ${4:++${2:i}}) {",
			"\t$0",
			"}\n"
		],
		"description": "Code snippet for for loop "
	},
	"for reverse": {
		"prefix": "forr",
		"body": [
			"for (int ${1:i} = ${2:length} - 1; ${1:i} >= 0; ${3:--${1:i}}) {",
			"\t$0",
			"}\n"
		],
		"description": "Code snippet for reverse for loop "
	},
	"for range": {
		"prefix": "forrange",
		"body": [
			"for (auto &&${1:i} : ${2:v}) {",
			"\t$0",
			"}\n"
		],
		"description": "Code snippet for range-based for loop "
	},
	"do": {
		"prefix": "do",
		"body": [
			"do {",
			"\t${0}",
			"} while(${1});\n"
		],
		"description": "Code snippet for do while loop "
	},
	"while": {
		"prefix": "while",
		"body": [
			"while ($1) {",
			"\t$2",
			"}\n$0"
		],
		"description": "Code snippet for while loop "
	},
	"if": {
		"prefix": "if",
		"body": [
			"if ($1) {",
			"\t$0",
			"}\n"
		],
		"description": "Code snippet for if () "
	},
	"else": {
		"prefix": "else",
		"body": [
			"else {",
			"\t$0",
			"}\n"
		],
		"description": "Code snippet for else "
	},
	"else if": {
		"prefix": "elif",
		"body": [
			"else if ($1) {",
			"\t$0",
			"}"
		],
		"description": "Code snippet for else if "
	},
	"if () else": {
		"prefix": "ifel",
		"body": [
			"if ($1) {",
			"\t$2",
			"} else {",
			"\t$0",
			"}\n"
		],
		"description": "Code snippet for if () else "
	},
	"if () else if () else": {
		"prefix": "ifelif",
		"body": [
			"if ($1) {",
			"\t$2",
			"} else if ($3) {",
			"\t$4",
			"} else {",
			"\t$0",
			"}\n"
		],
		"description": "Code snippet for if () else if () else "
	},
	"enum class": {
		"prefix": "enum",
		"body": [
			"enum class $1 ${2:: int} {",
			"\t$0",
			"};\n"
		],
		"description": "Code snippet for enum class "
	},
	"try catch": {
		"prefix": "try",
		"body": [
			"try {",
			"\t$1",
			"} catch (${2:const std::exception& e}) {",
			"\t${0:std::cerr << e.what() << '\\n';}",
			"}\n"
		],
		"description": "Code snippet for try catch block "
	},
	"switch": {
		"prefix": "switch",
		"body": [
			"switch ($1) {",
			"  case ${2:exp}:",
			"\t$0",
			"\tbreak;",
			"  default:",
			"\tbreak;",
			"}\n"
		],
		"description": "Code snippet for switch "
	},
	"class": {
		"prefix": "class",
		"body": [
			"class ${1:$TM_FILENAME_BASE} {",
			"  private:",
			"\t$3",
			"  public:",
			"\t${1}($2);",
			"\t~${1}();",
			"\t${1}(${1} &&) = default;",
			"\t${1}(const ${1} &) = default;",
			"\t${1} &operator=(${1} &&) = default;",
			"\t${1} &operator=(const ${1} &) = default;",
			"};\n",
			"${1}::${1}($2) {",
			"}\n",
			"${1}::~${1}() {",
			"}\n"
		],
		"description": "Code snippet for class "
	},
	"class inline constructor": {
		"prefix": "classi",
		"body": [
			"class ${1:$TM_FILENAME_BASE} {",
			"  private:",
			"\t$3",
			"  public:",
			"\t${1}($2) {",
			"\n\t};",
			"\t~${1}() {",
			"\n\t}",
			"\t${1}(${1} &&) = default;",
			"\t${1}(const ${1} &) = default;",
			"\t${1} &operator=(${1} &&) = default;",
			"\t${1} &operator=(const ${1} &) = default;",
			"};\n"
		],
		"description": "Code snippet for class "
	},
	"struct": {
		"prefix": "struct",
		"body": [
			"struct ${1:$TM_FILENAME_BASE} {",
			"\t$0",
			"};\n"
		],
		"description": "Code snippet for struct "
	},
	"#if define()": {
		"prefix": "ifd",
		"body": [
			"#if defined(${1:MACRO})",
			"\n$0\n",
			"#endif\t// ${1:MACRO}"
		],
		"description": "Code snippet for #if defined() "
	},
	"#if !define()": {
		"prefix": "ifnd",
		"body": [
			"#if !defined(${1:MACRO})",
			"#define ${1:MACRO}",
			"\n$0\n",
			"#endif\t// ${1:MACRO}"
		],
		"description": "Code snippet for #if !defined() "
	},
	"#ifdef": {
		"prefix": "ifdef",
		"body": [
			"#ifdef  $1",
			"$0",
			"#endif  //$1"
		],
		"description": "Code snippet for #ifdef"
	},
	"#ifndef": {
		"prefix": "ifndef",
		"body": [
			"#ifndef __${TM_FILENAME_BASE/(.*)/${1:/upcase}/}__H__",
			"#define __${TM_FILENAME_BASE/(.*)/${1:/upcase}/}__H__",
			"$0",
			"#endif  //__${TM_FILENAME_BASE/(.*)/${1:/upcase}/}__H__"
		],
		"description": "Code snippet for #ifndef"
	},
	"main": {
		"prefix": "main",
		"body": [
			"int main(int argc, char const **argv) {",
			"\t$0",
			"\tsystem(\"pause\");",
			"\treturn 0;",
			"}\n"
		],
		"description": "Code snippet for main() "
	},
	"wmain": {
		"prefix": "wmain",
		"body": [
			"int main(int argc, wchar_t const **argv) {",
			"\t$0",
			"\tsystem(\"pause\");",
			"\treturn 0;",
			"}\n"
		],
		"description": "Code snippet for wmain() "
	},
	"MIT License": {
		"prefix": "mitl",
		"body": [
			"// The MIT License (MIT)\n",
			"// Copyright (c) ${1:$CURRENT_YEAR} ${2:NAME}\n",
			"//  Permission is hereby granted, free of charge, to any person obtaining a",
			"//  copy of this software and associated documentation files (the \"Software\"),",
			"//  to deal in the Software without restriction, including without limitation",
			"//  the rights to use, copy, modify, merge, publish, distribute, sublicense,",
			"//  and/or sell copies of the Software, and to permit persons to whom the",
			"//  Software is furnished to do so, subject to the following conditions:",
			"//",
			"//  The above copyright notice and this permission notice shall be included in",
			"//  all copies or substantial portions of the Software.",
			"//",
			"//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS",
			"//  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
			"//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
			"//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
			"//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",
			"//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER",
			"//  DEALINGS IN THE SOFTWARE.\n",
			"${3:/* code */}"
		],
		"description": "Code snippet for MIT License "
	},
	"fileheader": {
		"prefix": "fileheader",
		"body": [
			"/**",
			"**********************************************************************************************************************************************************************************************************************************",
			"* @file:\t$TM_FILENAME",
			"* @author:\t$1",
			"* @date:\t$CURRENT_YEAR年$CURRENT_MONTH月$CURRENT_DATE日 $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND $CURRENT_DAY_NAME",
			"* @brief:\t$2",
			"**********************************************************************************************************************************************************************************************************************************",
			"**/"
		],
		"description": "snippet for a file header"
	},
}